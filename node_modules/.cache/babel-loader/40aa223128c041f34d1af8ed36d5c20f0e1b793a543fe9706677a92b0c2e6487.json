{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ventu\\\\OneDrive\\\\Escritorio\\\\Desarollo Web Integral\\\\Front\\\\consumo-microservice-libreria\\\\src\\\\views\\\\ListaAutores.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getAutores } from \"../service/apiAutor.js\"; // Importación de funciones del servicio API de autores\nimport { Card, CardBody, CardHeader, Table, Row, Col } from \"reactstrap\"; // Importación de componentes de Reactstrap\nimport PanelHeader from \"components/PanelHeader/PanelHeader.js\"; // Importación de un componente personalizado\nimport { getLibros } from \"../service/apiLibro\"; // Importa la función para obtener libros\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TablaAutores() {\n  _s();\n  const [autores, setAutores] = useState([]); // Estado para almacenar la lista de autores\n  const [librosConAutores, setLibrosConAutores] = useState([]); // Estado para almacenar los libros con nombres de autores\n\n  useEffect(() => {\n    // Efecto de lado para cargar la lista de autores al cargar el componente\n    const fetchData = async () => {\n      try {\n        // Obtener la lista de autores usando la función getAutores del servicio API\n        const dataAutores = await getAutores();\n        setAutores(dataAutores); // Actualizar el estado con la lista de autores obtenida\n\n        // Obtener la lista de libros con nombres de autores usando la función getLibros del servicio API\n        const dataLibros = await getLibros();\n        setLibrosConAutores(dataLibros); // Actualizar el estado con la lista de libros obtenida\n      } catch (error) {\n        console.error(\"Error al obtener autores o libros:\", error); // Manejo de errores si falla la obtención de autores o libros\n      }\n    };\n    fetchData(); // Llamar a la función fetchData al montar el componente\n  }, []);\n\n  // Función para formatear la fecha y mostrarla sin la hora\n  const formatDate = dateString => {\n    if (!dateString) return \"\"; // Manejar casos donde la fecha no está definida\n\n    const date = new Date(dateString); // Crear un objeto de fecha desde la cadena de fecha\n    const year = date.getFullYear(); // Obtener el año\n    const month = (1 + date.getMonth()).toString().padStart(2, \"0\"); // Obtener el mes y formatearlo\n    const day = date.getDate().toString().padStart(2, \"0\"); // Obtener el día y formatearlo\n\n    return `${day}/${month}/${year}`; // Formatear la fecha como día/mes/año\n  };\n\n  // Renderizado del componente\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PanelHeader, {\n      size: \"sm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"title\",\n                children: \"Autores\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n              children: /*#__PURE__*/_jsxDEV(Table, {\n                responsive: true,\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  className: \"text-primary\",\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Nombre\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 58,\n                      columnNumber: 23\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Apellido\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 59,\n                      columnNumber: 23\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Fecha de Nacimiento\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 60,\n                      columnNumber: 23\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Imagen\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 61,\n                      columnNumber: 23\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: autores.map((autor, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: autor.nombre\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 68,\n                      columnNumber: 25\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: autor.apellido\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 69,\n                      columnNumber: 25\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: formatDate(autor.fechaNacimiento)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 70,\n                      columnNumber: 25\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/jpeg;base64,${autor.imagen}`,\n                        alt: `Imagen de ${autor.nombre}`,\n                        style: {\n                          width: '100px',\n                          height: 'auto'\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 73,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 71,\n                      columnNumber: 25\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TablaAutores, \"9conZhHqy9OiSZxMwZQTuvAUSsA=\");\n_c = TablaAutores;\nexport default TablaAutores;\nvar _c;\n$RefreshReg$(_c, \"TablaAutores\");","map":{"version":3,"names":["React","useState","useEffect","getAutores","Card","CardBody","CardHeader","Table","Row","Col","PanelHeader","getLibros","jsxDEV","_jsxDEV","Fragment","_Fragment","TablaAutores","_s","autores","setAutores","librosConAutores","setLibrosConAutores","fetchData","dataAutores","dataLibros","error","console","formatDate","dateString","date","Date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","children","size","fileName","_jsxFileName","lineNumber","columnNumber","className","xs","responsive","map","autor","index","nombre","apellido","fechaNacimiento","src","imagen","alt","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/ventu/OneDrive/Escritorio/Desarollo Web Integral/Front/consumo-microservice-libreria/src/views/ListaAutores.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getAutores } from \"../service/apiAutor.js\"; // Importación de funciones del servicio API de autores\nimport { Card, CardBody, CardHeader, Table, Row, Col } from \"reactstrap\"; // Importación de componentes de Reactstrap\nimport PanelHeader from \"components/PanelHeader/PanelHeader.js\"; // Importación de un componente personalizado\nimport { getLibros } from \"../service/apiLibro\"; // Importa la función para obtener libros\n\nfunction TablaAutores() {\n  const [autores, setAutores] = useState([]); // Estado para almacenar la lista de autores\n  const [librosConAutores, setLibrosConAutores] = useState([]); // Estado para almacenar los libros con nombres de autores\n\n  useEffect(() => {\n    // Efecto de lado para cargar la lista de autores al cargar el componente\n    const fetchData = async () => {\n      try {\n        // Obtener la lista de autores usando la función getAutores del servicio API\n        const dataAutores = await getAutores();\n        setAutores(dataAutores); // Actualizar el estado con la lista de autores obtenida\n\n        // Obtener la lista de libros con nombres de autores usando la función getLibros del servicio API\n        const dataLibros = await getLibros();\n        setLibrosConAutores(dataLibros); // Actualizar el estado con la lista de libros obtenida\n      } catch (error) {\n        console.error(\"Error al obtener autores o libros:\", error); // Manejo de errores si falla la obtención de autores o libros\n      }\n    };\n\n    fetchData(); // Llamar a la función fetchData al montar el componente\n  }, []);\n\n  // Función para formatear la fecha y mostrarla sin la hora\n  const formatDate = (dateString) => {\n    if (!dateString) return \"\"; // Manejar casos donde la fecha no está definida\n\n    const date = new Date(dateString); // Crear un objeto de fecha desde la cadena de fecha\n    const year = date.getFullYear(); // Obtener el año\n    const month = (1 + date.getMonth()).toString().padStart(2, \"0\"); // Obtener el mes y formatearlo\n    const day = date.getDate().toString().padStart(2, \"0\"); // Obtener el día y formatearlo\n\n    return `${day}/${month}/${year}`; // Formatear la fecha como día/mes/año\n  };\n\n  // Renderizado del componente\n  return (\n    <>\n      <PanelHeader size=\"sm\" /> {/* Encabezado del panel */}\n      <div className=\"content\">\n        <Row>\n          <Col xs={12}>\n            <Card>\n              <CardHeader>\n                <h4 className=\"title\">Autores</h4>\n              </CardHeader>\n              <CardBody>\n                {/* Tabla para mostrar la lista de autores */}\n                <Table responsive>\n                  <thead className=\"text-primary\">\n                    <tr>\n                      <th>Nombre</th> {/* Encabezado de columna para el nombre del autor */}\n                      <th>Apellido</th> {/* Encabezado de columna para el apellido del autor */}\n                      <th>Fecha de Nacimiento</th> {/* Encabezado de columna para la fecha de nacimiento del autor */}\n                      <th>Imagen</th> {/* Encabezado de columna para la imagen del autor */}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {/* Mapeo de la lista de autores para mostrar cada autor en una fila */}\n                    {autores.map((autor, index) => (\n                      <tr key={index}>\n                        <td>{autor.nombre}</td> {/* Celda con el nombre del autor */}\n                        <td>{autor.apellido}</td> {/* Celda con el apellido del autor */}\n                        <td>{formatDate(autor.fechaNacimiento)}</td> {/* Celda con la fecha de nacimiento del autor */}\n                        <td>\n                          {/* Celda con la imagen del autor */}\n                          <img src={`data:image/jpeg;base64,${autor.imagen}`} alt={`Imagen de ${autor.nombre}`} style={{ width: '100px', height: 'auto' }} />\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default TablaAutores;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}