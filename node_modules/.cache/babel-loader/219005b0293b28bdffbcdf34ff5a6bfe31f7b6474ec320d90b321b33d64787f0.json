{"ast":null,"code":"// apiLibro.js - Servicio API\nimport axios from 'axios';\nconst API_LIBRO_URL = 'https://localhost:7225/api/LibroMaterial';\nconst API_AUTOR_URL = 'https://localhost:7114/api/Autor';\n\n// Obtener todos los libros con nombres de autores\nexport const getLibros = async () => {\n  try {\n    // Obtener la lista de libros\n    const responseLibros = await axios.get(API_LIBRO_URL);\n    const libros = responseLibros.data;\n\n    // Obtener la lista completa de autores\n    const autores = await getAutores();\n\n    // Crear un diccionario de autores por GUID para facilitar la búsqueda\n    const autoresDic = {};\n    autores.forEach(autor => {\n      autoresDic[autor.autorLibroGuid] = `${autor.nombre} ${autor.apellido}`;\n    });\n\n    // Reemplazar los GUIDs de autores en los libros con los nombres correspondientes\n    const librosConNombresDeAutores = libros.map(libro => {\n      return {\n        ...libro,\n        autorNombre: autoresDic[libro.autorLibro] || 'Autor desconocido'\n      };\n    });\n    return librosConNombresDeAutores;\n  } catch (error) {\n    console.error('Error al obtener libros o autores:', error);\n    throw error;\n  }\n};\n\n// Obtener un libro por GUID\nexport const getLibroPorId = async guid => {\n  try {\n    // Obtener el libro específico por su GUID\n    const responseLibro = await axios.get(`${API_LIBRO_URL}/${guid}`);\n    const libro = responseLibro.data;\n\n    // Obtener la información del autor correspondiente\n    const autorResponse = await axios.get(`${API_AUTOR_URL}/${libro.autorLibro}`);\n    const autor = autorResponse.data;\n\n    // Combinar la información del libro y del autor\n    const libroConAutor = {\n      ...libro,\n      autorNombre: `${autor.nombre} ${autor.apellido}`\n    };\n    return libroConAutor;\n  } catch (error) {\n    console.error('Error al obtener libro por GUID:', error);\n    throw error;\n  }\n};\n\n// Agregar un nuevo libro (POST)\nexport const agregarLibro = async nuevoLibro => {\n  try {\n    // Obtener la lista completa de autores\n    const autores = await getAutores();\n\n    // Encontrar el autor que coincida con el nombre seleccionado\n    const autorEncontrado = autores.find(autor => autor.nombre === nuevoLibro.autor);\n    if (!autorEncontrado) {\n      throw new Error('No se encontró el autor especificado');\n    }\n\n    // Construir el objeto a enviar con el GUID correcto del autor\n    const libroParaEnviar = {\n      titulo: nuevoLibro.titulo,\n      fechaPublicacion: nuevoLibro.fechaPublicacion,\n      autorLibro: autorEncontrado.autorLibroGuid // Aquí debe ser el GUID del autor en el campo autorLibro\n    };\n    console.log('Datos a enviar:', libroParaEnviar);\n\n    // Enviar la solicitud POST con el objeto modificado\n    const response = await axios.post(API_LIBRO_URL, libroParaEnviar, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Respuesta del servidor:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error al agregar libro:', error);\n    throw error;\n  }\n};\n\n// Obtener todos los autores\nexport const getAutores = async () => {\n  try {\n    const response = await axios.get(API_AUTOR_URL);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener autores:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_LIBRO_URL","API_AUTOR_URL","getLibros","responseLibros","get","libros","data","autores","getAutores","autoresDic","forEach","autor","autorLibroGuid","nombre","apellido","librosConNombresDeAutores","map","libro","autorNombre","autorLibro","error","console","getLibroPorId","guid","responseLibro","autorResponse","libroConAutor","agregarLibro","nuevoLibro","autorEncontrado","find","Error","libroParaEnviar","titulo","fechaPublicacion","log","response","post","headers"],"sources":["C:/Users/ventu/OneDrive/Escritorio/Desarollo Web Integral/Front/consumo-microservice-libreria/src/service/apiLibro.js"],"sourcesContent":["// apiLibro.js - Servicio API\r\nimport axios from 'axios';\r\n\r\nconst API_LIBRO_URL = 'https://localhost:7225/api/LibroMaterial';\r\nconst API_AUTOR_URL = 'https://localhost:7114/api/Autor';\r\n\r\n// Obtener todos los libros con nombres de autores\r\nexport const getLibros = async () => {\r\n  try {\r\n    // Obtener la lista de libros\r\n    const responseLibros = await axios.get(API_LIBRO_URL);\r\n    const libros = responseLibros.data;\r\n\r\n    // Obtener la lista completa de autores\r\n    const autores = await getAutores();\r\n\r\n    // Crear un diccionario de autores por GUID para facilitar la búsqueda\r\n    const autoresDic = {};\r\n    autores.forEach(autor => {\r\n      autoresDic[autor.autorLibroGuid] = `${autor.nombre} ${autor.apellido}`;\r\n    });\r\n\r\n    // Reemplazar los GUIDs de autores en los libros con los nombres correspondientes\r\n    const librosConNombresDeAutores = libros.map(libro => {\r\n      return {\r\n        ...libro,\r\n        autorNombre: autoresDic[libro.autorLibro] || 'Autor desconocido'\r\n      };\r\n    });\r\n\r\n    return librosConNombresDeAutores;\r\n  } catch (error) {\r\n    console.error('Error al obtener libros o autores:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener un libro por GUID\r\nexport const getLibroPorId = async (guid) => {\r\n  try {\r\n    // Obtener el libro específico por su GUID\r\n    const responseLibro = await axios.get(`${API_LIBRO_URL}/${guid}`);\r\n    const libro = responseLibro.data;\r\n\r\n    // Obtener la información del autor correspondiente\r\n    const autorResponse = await axios.get(`${API_AUTOR_URL}/${libro.autorLibro}`);\r\n    const autor = autorResponse.data;\r\n\r\n    // Combinar la información del libro y del autor\r\n    const libroConAutor = {\r\n      ...libro,\r\n      autorNombre: `${autor.nombre} ${autor.apellido}`,\r\n    };\r\n\r\n    return libroConAutor;\r\n  } catch (error) {\r\n    console.error('Error al obtener libro por GUID:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Agregar un nuevo libro (POST)\r\nexport const agregarLibro = async (nuevoLibro) => {\r\n  try {\r\n    // Obtener la lista completa de autores\r\n    const autores = await getAutores();\r\n\r\n    // Encontrar el autor que coincida con el nombre seleccionado\r\n    const autorEncontrado = autores.find(autor => autor.nombre === nuevoLibro.autor);\r\n\r\n    if (!autorEncontrado) {\r\n      throw new Error('No se encontró el autor especificado');\r\n    }\r\n\r\n    // Construir el objeto a enviar con el GUID correcto del autor\r\n    const libroParaEnviar = {\r\n      titulo: nuevoLibro.titulo,\r\n      fechaPublicacion: nuevoLibro.fechaPublicacion,\r\n      autorLibro: autorEncontrado.autorLibroGuid, // Aquí debe ser el GUID del autor en el campo autorLibro\r\n    };\r\n\r\n    console.log('Datos a enviar:', libroParaEnviar);\r\n\r\n    // Enviar la solicitud POST con el objeto modificado\r\n    const response = await axios.post(API_LIBRO_URL, libroParaEnviar, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    console.log('Respuesta del servidor:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al agregar libro:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener todos los autores\r\nexport const getAutores = async () => {\r\n  try {\r\n    const response = await axios.get(API_AUTOR_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener autores:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}