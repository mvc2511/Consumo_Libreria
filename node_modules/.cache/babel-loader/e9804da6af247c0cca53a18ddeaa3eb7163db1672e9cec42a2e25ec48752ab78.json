{"ast":null,"code":"import axios from 'axios';\nconst API_LIBRO_URL = 'https://localhost:7225/api/LibroMaterial';\nconst API_AUTOR_URL = 'https://localhost:7114/api/Autor';\n\n/// Obtener todos los libros\nexport const getLibros = async () => {\n  try {\n    // Obtener la lista de libros\n    const responseLibros = await axios.get(API_LIBRO_URL);\n    const libros = responseLibros.data;\n\n    // Obtener la lista de autores\n    const responseAutores = await axios.get(API_AUTOR_URL);\n    const autores = responseAutores.data;\n\n    // Crear un diccionario de autores por GUID para facilitar la búsqueda\n    const autoresDic = {};\n    autores.forEach(autor => {\n      autoresDic[autor.guid] = `${autor.nombre} ${autor.apellido}`;\n    });\n\n    // Reemplazar los GUIDs de autores en los libros con los nombres correspondientes\n    const librosConNombresDeAutores = libros.map(libro => {\n      return {\n        ...libro,\n        autorNombre: autoresDic[libro.autorLibro] || 'Autor desconocido'\n      };\n    });\n    return librosConNombresDeAutores;\n  } catch (error) {\n    console.error('Error al obtener libros o autores:', error);\n    throw error;\n  }\n};\n\n// Obtener un libro por ID\nexport const getLibroPorId = async id => {\n  try {\n    const response = await axios.get(`${API_LIBRO_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener libro por ID:', error);\n    throw error;\n  }\n};\n\n// Agregar un nuevo libro (POST)\nexport const agregarLibro = async nuevoLibro => {\n  try {\n    // Obtener la lista completa de autores\n    const autores = await getAutores();\n\n    // Encontrar el autor que coincida con el nombre seleccionado\n    const autorEncontrado = autores.find(autor => autor.nombre === nuevoLibro.autor);\n    if (!autorEncontrado) {\n      throw new Error('No se encontró el autor especificado');\n    }\n\n    // Construir el objeto a enviar con el GUID correcto del autor\n    const libroParaEnviar = {\n      titulo: nuevoLibro.titulo,\n      fechaPublicacion: nuevoLibro.fechaPublicacion,\n      autorLibro: autorEncontrado.autorLibroGuid // Aquí debe ser el GUID del autor en el campo autorLibro\n    };\n    console.log('Datos a enviar:', libroParaEnviar);\n\n    // Enviar la solicitud POST con el objeto modificado\n    const response = await axios.post(API_LIBRO_URL, libroParaEnviar, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Respuesta del servidor:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error al agregar libro:', error);\n    throw error;\n  }\n};\n\n// Obtener todos los autores\nexport const getAutores = async () => {\n  try {\n    const response = await axios.get(API_AUTOR_URL);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener autores:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_LIBRO_URL","API_AUTOR_URL","getLibros","responseLibros","get","libros","data","responseAutores","autores","autoresDic","forEach","autor","guid","nombre","apellido","librosConNombresDeAutores","map","libro","autorNombre","autorLibro","error","console","getLibroPorId","id","response","agregarLibro","nuevoLibro","getAutores","autorEncontrado","find","Error","libroParaEnviar","titulo","fechaPublicacion","autorLibroGuid","log","post","headers"],"sources":["C:/Users/ventu/OneDrive/Escritorio/Desarollo Web Integral/Front/now-ui-dashboard-react-main/src/service/apiLibro.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_LIBRO_URL = 'https://localhost:7225/api/LibroMaterial';\r\nconst API_AUTOR_URL = 'https://localhost:7114/api/Autor';\r\n\r\n/// Obtener todos los libros\r\nexport const getLibros = async () => {\r\n  try {\r\n    // Obtener la lista de libros\r\n    const responseLibros = await axios.get(API_LIBRO_URL);\r\n    const libros = responseLibros.data;\r\n\r\n    // Obtener la lista de autores\r\n    const responseAutores = await axios.get(API_AUTOR_URL);\r\n    const autores = responseAutores.data;\r\n\r\n    // Crear un diccionario de autores por GUID para facilitar la búsqueda\r\n    const autoresDic = {};\r\n    autores.forEach(autor => {\r\n      autoresDic[autor.guid] = `${autor.nombre} ${autor.apellido}`;\r\n    });\r\n\r\n    // Reemplazar los GUIDs de autores en los libros con los nombres correspondientes\r\n    const librosConNombresDeAutores = libros.map(libro => {\r\n      return {\r\n        ...libro,\r\n        autorNombre: autoresDic[libro.autorLibro] || 'Autor desconocido'\r\n      };\r\n    });\r\n\r\n    return librosConNombresDeAutores;\r\n  } catch (error) {\r\n    console.error('Error al obtener libros o autores:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener un libro por ID\r\nexport const getLibroPorId = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_LIBRO_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener libro por ID:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Agregar un nuevo libro (POST)\r\nexport const agregarLibro = async (nuevoLibro) => {\r\n  try {\r\n    // Obtener la lista completa de autores\r\n    const autores = await getAutores();\r\n\r\n    // Encontrar el autor que coincida con el nombre seleccionado\r\n    const autorEncontrado = autores.find(autor => autor.nombre === nuevoLibro.autor);\r\n\r\n    if (!autorEncontrado) {\r\n      throw new Error('No se encontró el autor especificado');\r\n    }\r\n\r\n    // Construir el objeto a enviar con el GUID correcto del autor\r\n    const libroParaEnviar = {\r\n      titulo: nuevoLibro.titulo,\r\n      fechaPublicacion: nuevoLibro.fechaPublicacion,\r\n      autorLibro: autorEncontrado.autorLibroGuid, // Aquí debe ser el GUID del autor en el campo autorLibro\r\n    };\r\n\r\n    console.log('Datos a enviar:', libroParaEnviar);\r\n\r\n    // Enviar la solicitud POST con el objeto modificado\r\n    const response = await axios.post(API_LIBRO_URL, libroParaEnviar, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    console.log('Respuesta del servidor:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al agregar libro:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener todos los autores\r\nexport const getAutores = async () => {\r\n  try {\r\n    const response = await axios.get(API_AUTOR_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener autores:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}