{"ast":null,"code":"import axios from 'axios';\nconst API_LIBRO_URL = 'https://localhost:7225/api/LibroMaterial';\nconst API_AUTOR_URL = 'https://localhost:7114/api/Autor';\n\n// Obtener todos los libros\nexport const getLibros = async () => {\n  try {\n    const response = await axios.get(API_LIBRO_URL);\n    const libros = response.data;\n\n    // Obtener la lista completa de autores para mapear el GUID del autor a su nombre\n    const autores = await getAutores();\n\n    // Mapear el GUID del autor en cada libro a una lista de nombres de autores que coincidan\n    libros.forEach(libro => {\n      libro.autores = []; // Inicializar una lista vacía para almacenar los nombres de los autores\n\n      autores.forEach(autor => {\n        if (libro.autorLibro && autor.autorLibroGuid === libro.autorLibro) {\n          libro.autores.push(autor.nombre); // Agregar el nombre del autor a la lista de autores del libro\n        }\n      });\n      if (libro.autores.length === 0) {\n        libro.autores.push('Autor Desconocido'); // Manejo de caso donde no se encuentran autores\n      }\n    });\n    return libros;\n  } catch (error) {\n    console.error('Error al obtener libros:', error);\n    throw error;\n  }\n};\n\n// Obtener un libro por ID\nexport const getLibroPorId = async id => {\n  try {\n    const response = await axios.get(`${API_LIBRO_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener libro por ID:', error);\n    throw error;\n  }\n};\n\n// Agregar un nuevo libro (POST)\nexport const agregarLibro = async nuevoLibro => {\n  try {\n    // Obtener la lista completa de autores\n    const autores = await getAutores();\n\n    // Encontrar el autor que coincida con el nombre seleccionado\n    const autorEncontrado = autores.find(autor => autor.nombre === nuevoLibro.autor);\n    if (!autorEncontrado) {\n      throw new Error('No se encontró el autor especificado');\n    }\n\n    // Construir el objeto a enviar con el GUID correcto del autor\n    const libroParaEnviar = {\n      titulo: nuevoLibro.titulo,\n      fechaPublicacion: nuevoLibro.fechaPublicacion,\n      autorLibro: autorEncontrado.autorLibroGuid // Aquí debe ser el GUID del autor en el campo autorLibro\n    };\n    console.log('Datos a enviar:', libroParaEnviar);\n\n    // Enviar la solicitud POST con el objeto modificado\n    const response = await axios.post(API_LIBRO_URL, libroParaEnviar, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Respuesta del servidor:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error al agregar libro:', error);\n    throw error;\n  }\n};\n\n// Obtener todos los autores\nexport const getAutores = async () => {\n  try {\n    const response = await axios.get(API_AUTOR_URL);\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener autores:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_LIBRO_URL","API_AUTOR_URL","getLibros","response","get","libros","data","autores","getAutores","forEach","libro","autor","autorLibro","autorLibroGuid","push","nombre","length","error","console","getLibroPorId","id","agregarLibro","nuevoLibro","autorEncontrado","find","Error","libroParaEnviar","titulo","fechaPublicacion","log","post","headers"],"sources":["C:/Users/ventu/OneDrive/Escritorio/Desarollo Web Integral/Front/now-ui-dashboard-react-main/src/service/apiLibro.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_LIBRO_URL = 'https://localhost:7225/api/LibroMaterial';\r\nconst API_AUTOR_URL = 'https://localhost:7114/api/Autor';\r\n\r\n// Obtener todos los libros\r\nexport const getLibros = async () => {\r\n  try {\r\n    const response = await axios.get(API_LIBRO_URL);\r\n    const libros = response.data;\r\n\r\n    // Obtener la lista completa de autores para mapear el GUID del autor a su nombre\r\n    const autores = await getAutores();\r\n\r\n    // Mapear el GUID del autor en cada libro a una lista de nombres de autores que coincidan\r\n    libros.forEach(libro => {\r\n      libro.autores = []; // Inicializar una lista vacía para almacenar los nombres de los autores\r\n\r\n      autores.forEach(autor => {\r\n        if (libro.autorLibro && autor.autorLibroGuid === libro.autorLibro) {\r\n          libro.autores.push(autor.nombre); // Agregar el nombre del autor a la lista de autores del libro\r\n        }\r\n      });\r\n\r\n      if (libro.autores.length === 0) {\r\n        libro.autores.push('Autor Desconocido'); // Manejo de caso donde no se encuentran autores\r\n      }\r\n    });\r\n\r\n    return libros;\r\n  } catch (error) {\r\n    console.error('Error al obtener libros:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener un libro por ID\r\nexport const getLibroPorId = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_LIBRO_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener libro por ID:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Agregar un nuevo libro (POST)\r\nexport const agregarLibro = async (nuevoLibro) => {\r\n  try {\r\n    // Obtener la lista completa de autores\r\n    const autores = await getAutores();\r\n\r\n    // Encontrar el autor que coincida con el nombre seleccionado\r\n    const autorEncontrado = autores.find(autor => autor.nombre === nuevoLibro.autor);\r\n\r\n    if (!autorEncontrado) {\r\n      throw new Error('No se encontró el autor especificado');\r\n    }\r\n\r\n    // Construir el objeto a enviar con el GUID correcto del autor\r\n    const libroParaEnviar = {\r\n      titulo: nuevoLibro.titulo,\r\n      fechaPublicacion: nuevoLibro.fechaPublicacion,\r\n      autorLibro: autorEncontrado.autorLibroGuid, // Aquí debe ser el GUID del autor en el campo autorLibro\r\n    };\r\n\r\n    console.log('Datos a enviar:', libroParaEnviar);\r\n\r\n    // Enviar la solicitud POST con el objeto modificado\r\n    const response = await axios.post(API_LIBRO_URL, libroParaEnviar, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    console.log('Respuesta del servidor:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al agregar libro:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener todos los autores\r\nexport const getAutores = async () => {\r\n  try {\r\n    const response = await axios.get(API_AUTOR_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener autores:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}